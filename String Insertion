#include <stdio.h>
#include <string.h>
#define MAX_LEN_P 100000
#define MAX_LEN_S 100

void strins(char *P, char *s, char *t);
void strins(char *P, char *s, char *t) {

    char copy[MAX_LEN_P + 1];
    char *np = P, *cp = copy;
    size_t const s_length = strlen(s);
    int check = 0, check_index = 0;


    while(*np != '\0')
    {

        if(*np == s[check_index])
        {
            check_index++;
            check++;

        }//if(*np == s[check_index])
        else if(check > 0 && *np != s[check_index]){

            check = 0;
            check_index = 0;
            if(*np == s[check_index])
            {
                check_index++;
                check++;

            }
        }
        *cp++ = *np++;

        if(check == s_length)
        {
            char *ct = t;
            while(*ct != '\0')
                *cp++ = *ct++;

            check = 0;
            check_index = 0;
        }

    }//while(*P != '\0')
    *cp = '\0';

    np = P;
    cp = copy;


    while(*cp != '\0'){
        *np++ = *cp++;
    }
    *np = '\0';

}

int main() {
  char P[MAX_LEN_P + 1], s[MAX_LEN_S + 2], t[MAX_LEN_S + 2];
  size_t P_len = 0;
  for (char buf[MAX_LEN_P + 1] = ""; strcmp(buf, "---\n"); fgets(buf, MAX_LEN_P + 1, stdin)) {
    size_t len = strlen(buf);
    if (len + P_len > MAX_LEN_P) {
      fprintf(stderr, "The length of the paragraph exceeds %d\n", MAX_LEN_P);
      return 1;
    }
    strncat(P, buf, len + 1);
    P_len += len;
  }
  fgets(s, MAX_LEN_S + 2, stdin);
  s[strlen(s) - 1] = '\0';  // remove newline
  fgets(t, MAX_LEN_S + 2, stdin);
  t[strlen(t) - 1] = '\0';  // remove newline
  strins(P, s, t);
  printf("%s", P);
  return 0;
}
