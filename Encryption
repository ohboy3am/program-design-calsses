#include <stdio.h>
#define MAX 64
#define swap(x, y) {int tmp = x; x = y; y = tmp;}

void bigswap(int size, char array[]);
void rolate(int size, char array[], char direction, int n);
void rail_fence(int size, char array[], int indexsize, int index[]);
void Vigenere_Cipher(int size, char array[],int move, char alphabet[]);
void Trithemius_Cipher(int size, char array[],int move, char trend);
void Caesar_Cipher(int size, char array[], int move);
int power(int a, int b);



char sentence[MAX];

int main(void){
    int command;
    char array1[4]={'m','e','o','w'};
    int array2[8]={4,3,1,2,7,6,5,8};
    int array31[4] = {3, 2, 4 , 1};
    int array32[8]={1,8,4,3,6,5,7,2};
    char array4[8]={'v','i','g','e','n','e','r','e'};
    int array51[8]={3,1,7,6,4,5,2,8};
    int array52[4] = {2, 4, 1 , 3};
    scanf("%d", &command);
    getchar();
    for (int i = 0; i < MAX; ++i) {
        sentence[i] = getchar();
    }


    switch (command) {
        case 1:
            bigswap(MAX, sentence);
            char left1[MAX/2], right1[MAX/2];
            for (int i = 0; i <MAX/2 ; ++i) {
                left1[i] = sentence[i];
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                right1[i] = sentence[i+MAX/2];
            }
            Caesar_Cipher(MAX/2, left1, 13);
            Vigenere_Cipher(MAX/2,right1,4,array1);

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i] = left1[i] ;
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i+MAX/2]  = right1[i];
            }
         
            rolate(MAX,sentence,'l',3);
            break;
        case 2:
            rolate(MAX, sentence, 'r', 11);
            Trithemius_Cipher(MAX,sentence,74, 'a');
            char left[MAX/2], right[MAX/2];
            for (int i = 0; i <MAX/2 ; ++i) {
                left[i] = sentence[i];
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                right[i] = sentence[i+MAX/2];
            }
            rolate(MAX/2, left, 'r', 1);
            rolate(MAX/2, right, 'r', 3);
            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i] = left[i] ;
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i+MAX/2]  = right[i];
            }

            rail_fence(MAX, sentence, 8, array2);
            break;

        case 3:


            rail_fence(MAX, sentence, 4, array31);
         
            char left3[MAX/2], right3[MAX/2];
            for (int i = 0; i <MAX/2 ; ++i) {
                left3[i] = sentence[i];
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                right3[i] = sentence[i+MAX/2];
            }
            Caesar_Cipher(MAX/2, left3, 8);
            rail_fence(MAX/2, right3, 8, array32);

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i] = left3[i] ;
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i+MAX/2]  = right3[i];
            }
        
            bigswap(MAX, sentence);
     
            Trithemius_Cipher(MAX,sentence,602, 'd');
        
            rolate(MAX, sentence, 'r', 7);
            break;

        case 4:
            ;
            char left4[MAX/2], right4[MAX/2];
            for (int i = 0; i <MAX/2 ; ++i) {
                left4[i] = sentence[i];
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                right4[i] = sentence[i+MAX/2];
            }
            Vigenere_Cipher(MAX/2, left4,8,array4);
            bigswap(MAX/2, left4);
            Trithemius_Cipher(MAX/2, left4,3,'a');
            rolate(MAX/2, right4,'l', 24);

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i] = left4[i] ;
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i+MAX/2]  = right4[i];
            }
         
            rolate(MAX,sentence,'r', 19);
            break;
            
        case 5:
            rail_fence(MAX, sentence,8,array51);
        
            char left5[MAX/2], right5[MAX/2];
            for (int i = 0; i <MAX/2 ; ++i) {
                left5[i] = sentence[i];
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                right5[i] = sentence[i+MAX/2];
            }
            Caesar_Cipher(MAX/2, left5, 10);
            rail_fence(MAX/2, right5, 4, array52);

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i] = left5[i] ;
            }

            for (int i = 0; i <MAX/2 ; ++i) {
                sentence[i+MAX/2]  = right5[i];
            }
        
            bigswap(MAX, sentence);
            Trithemius_Cipher(MAX,sentence,52,'a');
           
            rolate(MAX,sentence,'r',7);
        
            break;
        default: break;

    }





    for (int i = 0; i < MAX; ++i) {
        putchar(sentence[i]);
    }


    return 0;
}

void bigswap(int size, char array[]){
    for (int i = 0; i < size / 2 ; ++i) {
        swap(array[i], array[i + size / 2])
    }
}
int power(int a, int b){
    if(b==0)return 1;
    else return a * power(a, b-1);
}



void rolate(int size, char array[], char direction, int n){  // n是位移量
#define SIZE size
    if (direction == 'l')
    {
        n *= -1;
        n += size;
    }
    int index[SIZE];
    for (int i = 0; i < SIZE; ++i) {
        index[i] = (i + n) % SIZE;
    }
    for (int i = 0; i < SIZE; ++i) index[i]++;
    rail_fence( SIZE, array, SIZE, index);



}

void rail_fence(int arraysize, char array[], int indexsize, int index[]){

#define INDEXSIZE indexsize
    int  indexcopy[INDEXSIZE], check[INDEXSIZE];


    for (int i = 0; i < arraysize / indexsize; ++i)
    {

        int   a= 0, tm;
        for (int j = 0; j < INDEXSIZE; ++j) check[j] = 0; //初始化
        for (int j = 0; j < INDEXSIZE; ++j) indexcopy[j] = (index[j]-1);//減一讓index可以直接用
        for (int j = 0; j < INDEXSIZE ; ++j) {
            if(check[indexcopy[a]]==0){
                check[indexcopy[a]]=1;
                swap(array[ (indexsize *i) + a], array[ (indexsize *i) + indexcopy[a] ])
                tm=indexcopy[a];  indexcopy[a]=indexcopy[tm];  indexcopy[ tm ]=tm;

            }
            else {
                a++;
                j--;
            }

        }

    }







}



void Vigenere_Cipher(int size,char array[],int move, char alphabet[]){
    int  count = 0;// 是密鑰有幾個 count是目前執行到字串中的第幾個
    char ch;//ch是目前的字母
#define n move
    int moveletter[n];
    for(int i = 0;i < n;i++){
        moveletter[i]= alphabet[i] - 'a';
    }
    for (int i = 0; i < size ; ++i) {

        if('a' <= array[i] && array[i] <= 'z'){
            for(int j = 0; j < moveletter[count % n]; j++){
                array[i]++;
                if(array[i] > 'z') array[i] = 'a';
            }
            count++;
        }

        else if('A' <= array[i] && array[i] <= 'Z'){
            for(int j = 0; j < moveletter[count % n]; j++){
                array[i]++;
                if(array[i] > 'Z') array[i] = 'A';
            }
            count++;
        }

    }
}

void Caesar_Cipher(int size, char array[], int move){

        move %= 26;
        if (move < 0) move += 26;
    for (int i = 0; i < size ; ++i) {

        if('a' <= array[i] && array[i] <= 'z'){
            if(move < 0)move += 26;
            for(int j = 0; j < move; j++){
                array[i]++;
                if(array[i] > 'z') array[i] = 'a';
            }

        }

        else if('A' <= array[i] && array[i] <= 'Z'){
            if(move < 0)move += 26;
            for(int j = 0; j < move; j++){
                array[i]++;
                if(array[i] > 'Z') array[i] = 'A';
            }

        }

    }


}




void Trithemius_Cipher(int size, char array[],int move, char trend){
    int t;
    if(trend == 'a')t = 1;
    else t = -1;
    move %= 26;
    if (move < 0) move += 26;
    move -= t;
    for (int i = 0; i < size ; ++i) {

        if('a' <= array[i] && array[i] <= 'z'){

            move += t;
            if(move < 0)move += 26;
            for(int j = 0; j < move; j++){
                array[i]++;
                if(array[i] > 'z') array[i] = 'a';
            }

        }

        else if('A' <= array[i] && array[i] <= 'Z'){

            move += t;
            if(move < 0)move += 26;
            for(int j = 0; j < move; j++){
                array[i]++;
                if(array[i] > 'Z') array[i] = 'A';
            }

        }

    }

}
