#include <stdio.h>
#include <stdbool.h>

struct element {
    int num;        // 1~9: valid, 0: don't have value yet
    bool can_modify;       // true: white area in the figure, false: gray area in the figure
};

void solve(struct element (*grid_p)[9]);
void print_grid(struct element (*grid_p)[9]) {
    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) {
            printf("%d ", grid_p[i][j].num);
        }
        printf("\n");
    }
}

#define NUM 9

int error_check(int x, int y, int n, struct element (*grid_p)[NUM]);

void solve(struct element (*grid_p)[NUM]) {
    for(int i = 0;i<NUM;i++)
        for(int j = 0;j<NUM;j++)
            if(! grid_p[i][j].num){
                for(int n = 1;n<=NUM;n++) {
                    if (error_check(j, i, n, grid_p) == 0) 
                    {
                        grid_p[i][j].num = n;
                        solve(grid_p);
                        if (grid_p[i][j].can_modify == false) return;
                        grid_p[i][j].num = 0;
                    }
                }//for n
                return;
            }





    for (int i = 0; i <NUM ; ++i) {
        for (int j = 0; j < NUM; ++j) {
            grid_p[i][j].can_modify = false;
        }

    }
}


int error_check(int x, int y, int n, struct element (*grid_p)[NUM]){


    for (int i = 0; i < NUM; ++i)//檢查row (y固定)
    {
        if(grid_p[y][i].num == n){
            return 1;
        }
    }

    for (int i = 0; i < NUM; ++i)//檢查column (x固定)
    {
        if(grid_p[i][x].num == n){
            return 1;
        }
    }



        int  b = (x/3)*3,a = (y/3)*3;//把 b a 設在方格的左上角

        for(int i = 0;i<3;i++){//檢查square
            for(int j = 0;j<3;j++){

                if(grid_p[a+i][b+j].num==n)
                {
                    return 1;
                }
                
            }
        }



    return 0;



}

int main(void) {
    struct element grid[9][9];
    char ch;
    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) {
            scanf(" %c", &ch);
            if (ch == '.') {    // can_modify assign true, num assign 0
                grid[i][j].num = 0;
                grid[i][j].can_modify = true;
            }
            else {      // value gotten from input, so we can't change this
                grid[i][j].num = ch - '0';
                grid[i][j].can_modify = false;
            }
        }
    }
    solve(grid);
    print_grid(grid);
    return 0;
}
