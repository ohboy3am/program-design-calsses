#include <stdio.h>
#include <stdlib.h>

// Enumrations
enum orb_type {
    O_UNSET = -1,
    O_RED = 17, O_BLUE = 1, O_GREEN = 6, O_YELLOW = 24,
    O_FLOAT = 5, O_CLONE = 2, O_EXPAND = 4, O_DYSON = 3
};

// Structure Declairation
struct node_t {
    struct node_t *next;
    enum orb_type orb;
};

struct head_t {
    struct node_t *head;
    int count;
    enum orb_type orb;
};

// Function Prototypes
struct head_t *alloc_list_heads(int size);              // Allocate memory for array of list heads
void init_head_arr(struct head_t *arr, int size);       // Initialize array of linked-lists
void print_magic_circle(struct head_t *arr, int size);  // Print the structure of magic circle
void insert_next(struct head_t *arr, int size, const char c);  // Insert the next orb onto the magic circle

// Main Function
int main() {
    int size;       // Size of center ring
    int count;      // Number of stem orbs will be put;

    // Allocate ring
    scanf("%d%d%*c", &size, &count);
    struct head_t *center_ring = alloc_list_heads(size);

    // Read and set ring
    init_head_arr(center_ring, size);

    // Place the orbs
    for (int i = 0; i < count; ++i) {
        insert_next(center_ring, size, getchar());
    }

    // Print magic circle configuration
    print_magic_circle(center_ring, size);
    return 0;
}

int counting = 0, copy_amounts = 0;


// Function Prototypes
struct head_t *alloc_list_heads(int size);              // Allocate memory for array of list heads
void init_head_arr(struct head_t *arr, int size);       // Initialize array of linked-lists
void print_magic_circle(struct head_t *arr, int size);  // Print the structure of magic circle
void insert_next(struct head_t *arr, int size, const char c);  // Insert the next orb onto the magic circle
void add_to_end(struct head_t* ring, enum orb_type orb_kind,int size);
void add_to_first(struct head_t* ring, enum orb_type orb_kind,int size);
void flo(struct head_t* ring, int size);
void add(struct head_t* ring, enum orb_type orb_kind,int size);
void clone(struct head_t* ring, int size);
void dyson(struct head_t* ring, int size);
void delete_and_add(int index, enum orb_type orb_kind, struct head_t* ring, int size);
void expand(struct head_t* ring, int size);



// Allocate memory for array of list heads
struct head_t *alloc_list_heads(int size){
    struct head_t * ring = malloc(sizeof(struct head_t)*size);
    return ring;
}

// Read input and Initialize array of linked-lists
void init_head_arr(struct head_t *arr, int size){
    struct head_t *end = arr+size;
    for(;arr <end;arr++)
    {
        arr->orb = getchar()-'A';
        arr->count = 1;
        arr->head = NULL;
    }
    getchar();
    return;
}

// Insert the next orb onto the magic circle
void insert_next(struct head_t *arr, int size, const char c){



    switch(c-'A'){
        case O_RED:
        case O_BLUE:
        case O_GREEN:
        case O_YELLOW:
            add( arr, c-'A', size);
            break;
        case O_FLOAT:
            flo( arr, size);
            break;
        case O_CLONE:
            add( arr, c-'A', size);
            clone(arr, size);
            break;
        case O_DYSON:
            add( arr, c-'A', size);
            dyson(arr, size);
            break;
        case O_EXPAND:
            add( arr, c-'A', size);
            expand(arr,size);
        default: break;

    }
    counting++;
    return;
}

void add_to_end(struct head_t* ring, enum orb_type orb_kind,int size){
    struct node_t* new_node = malloc(sizeof(struct node_t));
    new_node->orb = orb_kind;
    new_node->next = NULL;
    if( ( ring+(counting%size) )  -> head == NULL){
        ( ring+(counting%size) ) ->head = new_node;
        return;
    }
    struct node_t *cur = ( ring+(counting%size) ) ->head;
    while(cur->next){
        cur = cur->next;
    }
    cur->next = new_node;
}

void add_to_first(struct head_t* ring, enum orb_type orb_kind,int size){
    struct node_t* new_node = malloc(sizeof(struct node_t));
    new_node->orb = orb_kind;
    new_node->next = ( ring+(counting%size) ) ->head;
    ( ring+(counting%size) ) -> head = new_node;
}
void flo(struct head_t* ring, int size) {
    if( ( ( ring+(counting%size) ) -> count) < 0) return;
    else{
        add_to_end(ring,O_FLOAT,size);
        ( ( ring+(counting%size) ) -> count) = -1;
    }
}
void add(struct head_t* ring, enum orb_type orb_kind,int size){
    if( ( ring+(counting%size) ) -> count >= 0)
        add_to_end( ring, orb_kind,size);
    else
        add_to_first( ring, orb_kind,size);
}

void clone(struct head_t* ring, int size){
    copy_amounts++;
    if((copy_amounts%size) == 0 ) return;
    ( ring+( ( ( (counting-copy_amounts) % size ) + size ) % size ) ) ->count = ( ring+(counting%size) )->count;

    if(  ( ring+( ( ( (counting-copy_amounts) % size ) + size ) % size ) ) -> head==NULL){
        struct node_t* new_node = malloc(sizeof(struct node_t));
        new_node->next = NULL;
        ( ring+( ( ( (counting-copy_amounts) % size ) + size ) % size ) )  -> head = new_node;
    }
    struct node_t *cur = ( ring+(counting%size) ) -> head;
    struct node_t *cur_change = ( ring+( ( ( (counting-copy_amounts) % size ) + size ) % size ) ) -> head;

    while(cur){
        if(cur_change->next==NULL){
            struct node_t* new_node = malloc(sizeof(struct node_t));
            new_node->next = NULL;
            cur_change->next = new_node;
        }

        if(cur_change->orb == O_CLONE)copy_amounts--;
        if(copy_amounts<0)copy_amounts += size;
        cur_change->orb = cur->orb;
        if(cur_change->orb == O_CLONE)copy_amounts++;
        if(copy_amounts>size)copy_amounts -= size;
        cur = cur->next;
        if(cur)cur_change = cur_change->next;

    }
    if(cur_change->next){
        struct node_t *store, *delcur = cur_change->next ;

        while(delcur ){
            store = delcur ->next;
            if(delcur->orb==O_CLONE)copy_amounts--;
            free(delcur );
            delcur  = store;
        }

    }
    cur_change->next= NULL;
    copy_amounts %= size;
  

}

void dyson(struct head_t* ring, int size){

    for (int i = 1; i < size; ++i) {

        delete_and_add(i, ( ring+(counting%size) )->orb, ring,  size);

    }


}


void delete_and_add(int index, enum orb_type orb_kind, struct head_t* ring, int size)
{
    struct node_t *cur = ( ring+((counting+index)%size) )->head, *prev = NULL;
    while(cur){

        for (cur = ( ring+((counting+index)%size) )->head, prev = NULL;cur != NULL && cur->orb != orb_kind;
             prev = cur, cur = cur->next)
            ;

        if (cur == NULL)
            return ; /* n was not found */
        if (prev == NULL){
            ( ring+((counting+index)%size) )->head = ( ring+((counting+index)%size) )->head->next; /* n is in the first node */
            add(ring, orb_kind, size);
        }

        else{
            prev->next = cur->next; /* n is in some other node */
            add(ring, orb_kind, size);
        }

        free(cur);



    }

}

void expand(struct head_t* ring, int size){

    for (int i = 0; i < size; ++i) {

        add(ring-(counting%size)+i,( ring+(counting%size) )->orb,size);

    }
}

// Function Definitions
void print_magic_circle(struct head_t *arr, int size) {
    if (!arr) {
        return;
    }

    for (int i = 0; i < size; ++i) {
        // Print center orb
        printf("CO_%c", arr[i].orb + 'A');

        // Print stem
        struct node_t *cur = arr[i].head;
        while (cur) {
            printf(" -> %c", 'A' + cur->orb);
            cur = cur->next;
        }
        if (i + 1 < size) putchar('\n');
    }
    return;
}
